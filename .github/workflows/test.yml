name: Go Test with Dockerfile Compose

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # 检查代码版本
      - name: Checkout code
        uses: actions/checkout@v2

      # 安装go
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23.3

      # 检查是否能够编译
      - name: Install dependencies
        run: |
          go mod tidy
          go build .

      # 启动docker-compose以构建相关依赖
      - name: Set up Dockerfile Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose -f docker-compose.yaml up -d
          sleep 60 # 等待容器启动 1分钟，kafka有时候会出现问题

      # 启动所有代码测试
      - name: Run tests
        run: |
          go test -v ./...

      # 关闭容器
      - name: Shut down Dockerfile Compose
        run: |
          docker-compose -f docker-compose.yaml down

  deploy:
    runs-on: ubuntu-latest
    needs: test  # 确保在 test 任务成功后执行
    if: github.ref == 'refs/heads/main'  # 仅在 main 分支推送时才会触发部署
    steps:
      # 检查代码版本
      - name: Checkout code
        uses: actions/checkout@v2

      # 设置 Docker 环境
      - name: Set up Docker
        run: |
          sudo curl -fsSL https://get.docker.com | sh
          sudo usermod -aG docker $USER
          sudo systemctl enable docker
          sudo systemctl start docker
          docker --version

      # 登录到阿里云 Docker 注册表
      - name: Log in to Alibaba Cloud Docker Registry
        uses: aliyun/acr-login@v1
        with:
          username: ${{ secrets.ALIYUN_DOCKER_USERNAME }}
          password: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}
          registry: registry.cn-hongkong.aliyuncs.com

      - name: Get latest Git tag
        id: get_tag
        run: |
          # 检查是否有标签
          TAGS=$(git tag)
          if [ -z "$TAGS" ]; then
            echo "No tags found, skipping deployment."
            echo "should_deploy=false" >> $GITHUB_ENV
          else
            # 获取当前 Git 标签（通过 git tag 获取最新标签）
            CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null)  # 如果没有标签，避免报错
            echo "Current tag: $CURRENT_TAG"
            
            # 获取最新 Git 标签
            LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
            echo "Latest tag: $LATEST_TAG"
            
            # 判断当前标签是否 >= 最新标签
            if [[ "$CURRENT_TAG" == "$LATEST_TAG" || "$(echo -e "$LATEST_TAG\n$CURRENT_TAG" | sort -V | head -n 1)" == "$LATEST_TAG" ]]; then
              echo "deploy_latest=true" >> $GITHUB_ENV
            else
              echo "deploy_latest=false" >> $GITHUB_ENV
            fi
            echo "should_deploy=true" >> $GITHUB_ENV  # 如果存在标签，继续部署
          fi

      

      # 判断是否需要推送镜像
      - name: Build and push Docker image
        if: env.should_deploy == 'true'
        run: |
          TAG=$(git rev-parse --short HEAD)  # 使用 Git 提交短 ID 作为标签
          echo "构建并推送镜像：$(TAG)"

          # 构建镜像
          make TAG=${TAG} build

          # 推送镜像
          make push

      # 推送 `latest` 标签的镜像（只有当前标签 >= 最新标签时才执行推送）
      - name: Push latest Docker image
        if: env.should_deploy == 'true' && env.deploy_latest == 'true' && github.ref == 'refs/heads/main'
        run: |
          # 只有最新标签时才推送 `latest`
          echo "推送镜像：latest"
          make TAG=latest build
          make push